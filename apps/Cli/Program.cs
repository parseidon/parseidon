using Parseidon.Cli;
using Parseidon.Parser;
using CommandLine;

var result = CommandLine.Parser.Default.ParseArguments<CommandLineOptions>(args)
  .WithParsed(options =>
    {
        // Hier können Sie die Optionen verwenden
        if (options.ShowHelp)
        {
            Console.WriteLine("Hilfeinformationen anzeigen");
            return;
        }
        String GrammarFile = String.Empty;
        if (!string.IsNullOrEmpty(options.FolderPath))
        {
            if (!Directory.Exists(options.FolderPath))
            {
                Console.WriteLine("Der angegebene Ordner existiert nicht.");
                return;
            }
            // Alle Dateien mit der Endung .gram im Ordner finden
            var gramFiles = Directory.GetFiles(options.FolderPath, "*.gram");
            if (gramFiles.Length == 0)
            {
                Console.WriteLine("Es wurden keine .gram-Dateien im Ordner gefunden.");
                return;
            }
            // Dateien nummeriert auflisten
            Console.WriteLine("Gefundene .gram-Dateien:");
            for (int i = 0; i < gramFiles.Length; i++)
            {
                Console.WriteLine($"{i + 1}: {Path.GetFileName(gramFiles[i])}");
            }
            // Benutzer fragen, welche Datei verwendet werden soll
            Console.WriteLine("Bitte geben Sie die Nummer der zu verwendenden Datei ein:");
            if (int.TryParse(Console.ReadLine(), out int fileIndex) && fileIndex > 0 && fileIndex <= gramFiles.Length)
            {
                GrammarFile = gramFiles[fileIndex - 1];
            }
            else
            {
                Console.WriteLine("Ungültige Eingabe. Programm wird beendet.");
                return;
            }
        }
        else if (!string.IsNullOrEmpty(options.GrammerFile))
        {
            GrammarFile = options.GrammerFile;
        }
        else
        {
            Console.WriteLine("Bitte geben Sie entweder einen Ordnerpfad oder eine Grammatikdatei an.");
            return;
        }
        if (!File.Exists(GrammarFile))
        {
            Console.WriteLine($"Die angegebene Grammatikdatei \"{GrammarFile}\"existiert nicht.");
            return;
        }
        if (options.Verbose)
            Console.WriteLine($"Sie haben die Datei ausgewählt: {GrammarFile}");

        String Text = System.IO.File.ReadAllText(GrammarFile);
        ParseidonParser Parser = new ParseidonParser();
        Parser.Parse(Text);
        
        if (!string.IsNullOrEmpty(options.OutputFile) || options.ShowCode)
        {
            CreateCodeVisitor visitor = new CreateCodeVisitor();
            Parser.Visit(visitor);
            if (!string.IsNullOrEmpty(options.OutputFile))
            {
                if (File.Exists(options.OutputFile))
                {
                    Int32 backupFileNo = 1;
                    while (File.Exists($"{options.OutputFile}.{backupFileNo}.bak"))
                        backupFileNo++;
                    File.Copy(options.OutputFile, $"{options.OutputFile}.{backupFileNo}.bak", true);
                    if (options.Verbose)
                        Console.WriteLine($"Die Datei {options.OutputFile} existiert bereits. Eine Sicherungskopie wurde erstellt.");
                }
                String code = visitor.Code;
                code =
                    $"""
                    //****************************************//
                    //*                                      *//
                    //* This code is generated by parseidon. *//
                    //*     https://github.com/parseidon     *//
                    //*                                      *//
                    //****************************************//


                    """ + code;
                File.WriteAllText(options.OutputFile, code);
                if (options.Verbose)
                    Console.WriteLine($"Code wurde in die Datei {options.OutputFile} geschrieben.");
            }
            if (options.ShowCode)
            {
                Console.WriteLine("Generierter Code:");
                Console.WriteLine(visitor.Code);
            }
        }

        if (!string.IsNullOrEmpty(options.ASTFile) || options.ShowAST)
        {
            RenderASTVisitor visitor = new RenderASTVisitor();
            Parser.Visit(visitor);
            if (!string.IsNullOrEmpty(options.ASTFile))
            {
                File.WriteAllText(options.ASTFile, visitor.AST);
                if (options.Verbose)
                    Console.WriteLine($"AST wurde in die Datei {options.ASTFile} geschrieben.");
            }       
            if (options.ShowAST)
            {
                Console.WriteLine("AST:");
                Console.WriteLine(visitor.AST);
            }             
        }
    }
  );



class CommandLineOptions
{
    [Option('f', "folder", SetName = "Folder", Required = true, HelpText = "Path to the folder containing .gram files.")]
    public string FolderPath { get; set; } = string.Empty;

    [Option('g', "grammer", SetName = "Grammer", Required = true, HelpText = "Path to the .gram file.")]
    public String GrammerFile { get; set; } = string.Empty;

    [Option('h', "help", Required = false, HelpText = "Display help information.")]
    public bool ShowHelp { get; set; } = false;

    [Option('o', "output", Required = false, HelpText = "Path to the output file.")]
    public string OutputFile { get; set; } = string.Empty;

    [Option('a', "ast", Required = false, HelpText = "Path to the AST file.")]
    public string ASTFile { get; set; } = string.Empty;

    [Option('s', "show-ast", Required = false, HelpText = "Show the AST in the console.")]
    public bool ShowAST { get; set; } = false;

    [Option('c', "show-code", Required = false, HelpText = "Show the generated code in the console.")]
    public bool ShowCode { get; set; } = false;

    [Option('v', "verbose", Required = false, HelpText = "Enable verbose output.")]
    public bool Verbose { get; set; } = false;

}

