//****************************************//
//*                                      *//
//* This code is generated by parseidon. *//
//*     https://github.com/parseidon     *//
//*                                      *//
//****************************************//

using System.Text.RegularExpressions;

namespace Parseidon.Parser;

public class ParseidonParser
{
    public class Visitor
    {
        public virtual void OnRuleGrammar(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleSPACING(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleNEWLINE(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleWHITESPACE(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleCOMMENT(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleDefinition(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleIsTerminal(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleDrop(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleIdentifier(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleIdentStart(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleIdentCont(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleEQUAL(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleExpression(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleSequence(ParseidonParser.ASTNode node) {}
        public virtual void OnRulePrefix(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleSuffix(ParseidonParser.ASTNode node) {}
        public virtual void OnRulePrimary(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleLiteral(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleChar(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleESCAPEES(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleBRACKETOPEN(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleBRACKETCLOSE(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleRegex(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleNUMBER(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleDOT(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleQUESTION(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleSTAR(ParseidonParser.ASTNode node) {}
        public virtual void OnRulePLUS(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleSLASH(ParseidonParser.ASTNode node) {}
        public virtual void OnRuleLINEEND(ParseidonParser.ASTNode node) {}
        public virtual void Visit(ASTNode node)
        {
            if(node == null)
                return;
            foreach(ASTNode child in node.Children)
                Visit(child);
            CallEvent(node.TokenId, node);
        }
    
        public virtual void CallEvent(Int32 tokenId, ASTNode node)
        {
            switch(tokenId)
            {
                case 31: OnRuleGrammar(node); break;
                case 6: OnRuleSPACING(node); break;
                case 4: OnRuleNEWLINE(node); break;
                case 5: OnRuleWHITESPACE(node); break;
                case 2: OnRuleCOMMENT(node); break;
                case 30: OnRuleDefinition(node); break;
                case 11: OnRuleIsTerminal(node); break;
                case 12: OnRuleDrop(node); break;
                case 24: OnRuleIdentifier(node); break;
                case 23: OnRuleIdentStart(node); break;
                case 22: OnRuleIdentCont(node); break;
                case 9: OnRuleEQUAL(node); break;
                case 29: OnRuleExpression(node); break;
                case 28: OnRuleSequence(node); break;
                case 27: OnRulePrefix(node); break;
                case 26: OnRuleSuffix(node); break;
                case 25: OnRulePrimary(node); break;
                case 21: OnRuleLiteral(node); break;
                case 20: OnRuleChar(node); break;
                case 10: OnRuleESCAPEES(node); break;
                case 1: OnRuleBRACKETOPEN(node); break;
                case 0: OnRuleBRACKETCLOSE(node); break;
                case 19: OnRuleRegex(node); break;
                case 3: OnRuleNUMBER(node); break;
                case 7: OnRuleDOT(node); break;
                case 15: OnRuleQUESTION(node); break;
                case 14: OnRuleSTAR(node); break;
                case 13: OnRulePLUS(node); break;
                case 18: OnRuleSLASH(node); break;
                case 8: OnRuleLINEEND(node); break;
            }
        }
    }

    private ASTNode? rootNode = null;
    
    public class ASTNode
    {
        private List<ASTNode> _children { get; } = new List<ASTNode>();
        private ASTNode? _parent = null;
    
        public String Text { get; set; }
        public String Name { get; set; }
        public IReadOnlyList<ASTNode> Children { get => _children; } 
        public Int32 TokenId { get; private set; }
        public Int32 Position { get; set; }
        public ASTNode? Parent { get => _parent; }            
    
        public ASTNode(Int32 tokenId, String name, String text)
        {
            Text = text;
            TokenId = tokenId;
            Name = name;
        }
    
        public void AssignFrom(ASTNode node)
        {
            Int32 nodeIndex = _children.IndexOf(node);
            if (nodeIndex >= 0)
            {
                Text = node.Text;
                TokenId = node.TokenId;
                Position = node.Position;
                List<ASTNode> tempChildren = new List<ASTNode>(node.Children);
                foreach(ASTNode child in tempChildren)
                {
                    child.SetParent(this, nodeIndex);
                    nodeIndex++;
                }
                _children.Remove(node);
            }
        }
         
        public String GetText()
        {
            if (Children.Count > 0)
                return String.Join("", Children.Select(x => x.GetText()));
            else
                return Text;
        }
    
        public void SetParent(ASTNode? parent, Int32 index = -1)
        {
            if(_parent != null)
                _parent._children.Remove(this);
            _parent = parent;
            if(_parent != null)
            {
                if(index < 0)
                    _parent._children.Add(this);
                else
                    _parent._children.Insert(index, this);
            }
        }
        
        public void AddChild(ASTNode? child)
        {
            if(child != null)
                _children.Add(child);
        }
    
        public void ClearChildren()
        {
            _children.Clear();
        }            
    }
    
    public class ParserState
    {
        public ParserState(String text)
        {
            Text = text;
        }            
        public String Text { get; }
        public Int32 Position { get; set; } = 0;
        public Boolean Eof => !(Position < Text.Length);
    }
    
    public Boolean CheckRegEx(ASTNode parentNode, ParserState state, String regEx)
    {
        Int32 oldPosition = state.Position;
        if((state.Position < state.Text.Length) && Regex.Match(state.Text[state.Position].ToString(), regEx).Success)
        {
            state.Position++;
            parentNode.AddChild(new ASTNode(-1, "REGEX", state.Text.Substring(oldPosition, state.Position - oldPosition)));
            return true;
        }
        state.Position = oldPosition;
        return false;
    }
    
    public Boolean CheckText(ASTNode parentNode, ParserState state, String text)
    {
        Int32 oldPosition = state.Position;
        Int32 position = 0;
        while (position < text.Length)
        {
            if(state.Eof || (state.Text[state.Position] != text[position]))
            {
                state.Position = oldPosition;
                return false;
            }
            position++;
            state.Position++;
        }
        parentNode.AddChild(new ASTNode(-1, "TEXT", state.Text.Substring(oldPosition, state.Position - oldPosition)));
        return true;
    }
    
    public Boolean CheckAnd(ASTNode parentNode, ParserState state, Func<ASTNode, Boolean> leftCheck, Func<ASTNode, Boolean> rightCheck)
    {
        Int32 oldPosition = state.Position;
        ASTNode tempNode = new ASTNode(parentNode.TokenId, "AND", parentNode.Text);
        tempNode.Position = parentNode.Position;
        if(leftCheck(tempNode))
        {
            if(rightCheck(tempNode))
            {
                parentNode.AddChild(tempNode);
                parentNode.AssignFrom(tempNode);
                return true;
            }
        }
        state.Position = oldPosition;
        return false;
    }
    
    public Boolean CheckOr(ASTNode parentNode, ParserState state, Func<ASTNode, Boolean> leftCheck, Func<ASTNode, Boolean> rightCheck)
    {
        Int32 oldPosition = state.Position;
        if(leftCheck(parentNode))
            return true;
        if(rightCheck(parentNode))
            return true;
        state.Position = oldPosition;
        return false;
    }
    
    public Boolean Drop(ASTNode parentNode, ParserState state, Func<ASTNode, Boolean> check)
    {
        Int32 oldPosition = state.Position;
        ASTNode tempNode = new ASTNode(-1, "", "");
        return check(tempNode);
    }
    
    public Boolean CheckOneOrMore(ASTNode parentNode, ParserState state, Func<ASTNode, Boolean> check)
    {
        Int32 oldPosition = state.Position;
        if(check(parentNode))
        {
            oldPosition = state.Position;
            while(check(parentNode))
            {
                oldPosition = state.Position;
            }
            state.Position = oldPosition;
            return true;
        }
        state.Position = oldPosition;
        return false;
    }
    
    public Boolean CheckZeroOrMore(ASTNode parentNode, ParserState state, Func<ASTNode, Boolean> check)
    {
        Int32 oldPosition = state.Position;
        while((!state.Eof) && check(parentNode))
        {
            oldPosition = state.Position;
        }
        state.Position = oldPosition;
        return true;
    }
    
    public Boolean CheckDifference(ASTNode parentNode, ParserState state, Func<ASTNode, Boolean> leftCheck, Func<ASTNode, Boolean> rightCheck)
    {
        Int32 oldPosition = state.Position;
        if(leftCheck(parentNode))
        {
            state.Position = oldPosition;
            if(rightCheck(parentNode))
                return true;
        }
        state.Position = oldPosition;
        return false;
    }
    
    public Boolean CheckRange(ASTNode parentNode, ParserState state, Int32 minCount, Int32 maxCount, Func<ASTNode, Boolean> check)
    {
        Int32 oldPosition = state.Position;
        Int32 count = 0;
        while((count <= maxCount) && check(parentNode))
        {
            oldPosition = state.Position;
            count++;
        }
        if(count >= minCount)
            return true;
        state.Position = oldPosition;
        return true;
    }
    
    public Boolean MakeTerminal(ASTNode parentNode, ParserState state, Func<ASTNode, Boolean> check)
    {
        Int32 oldPosition = state.Position;
        ASTNode tempNode = new ASTNode(-1, "", "");
        Boolean result =  check(tempNode);
        if (result)
        {
            tempNode.Text = tempNode.GetText();
            tempNode.ClearChildren();
            parentNode.Text = tempNode.GetText();
        }
        return result;
    }
    
    public Boolean PromoteAction(ASTNode parentNode, ParserState state, Func<ASTNode, Boolean> check)
    {
        Int32 childCount = parentNode.Children.Count;
        Boolean result = check(parentNode);
        if(result && (childCount < parentNode.Children.Count))
        {
            ASTNode newNode = parentNode.Children.Last();
            parentNode.AssignFrom(newNode);
        }
        return result;
    }
    
    public Boolean AddVirtualNode(ASTNode parentNode, ParserState state, Int32 tokenId, String text)
    {
        parentNode.AddChild(new ASTNode(tokenId, "VIRTUAL", text));
        return true;
    }
    
    public void Visit(Visitor visitor)
    {
        if(rootNode == null)
            throw new Exception("Root node is null");
        visitor.Visit(rootNode);
    }

    public Boolean CheckRule_Grammar(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(31, "Grammar", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckRule_SPACING(actualNode, state),
                (actualNode) => CheckOneOrMore(actualNode, state, 
                    (actualNode) => CheckRule_Definition(actualNode, state)
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_SPACING(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(6, "SPACING", "");
        Boolean result =         
            Drop(actualNode, state, 
                (actualNode) => CheckZeroOrMore(actualNode, state, 
                    (actualNode) => CheckOr(actualNode, state, 
                        (actualNode) => CheckRule_NEW_LINE(actualNode, state),
                        (actualNode) => CheckOr(actualNode, state, 
                            (actualNode) => CheckRule_WHITE_SPACE(actualNode, state),
                            (actualNode) => CheckRule_COMMENT(actualNode, state)
                        )
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_NEW_LINE(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(4, "NEW_LINE", "");
        Boolean result =         CheckRegEx(actualNode, state, "[\\r]");
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_WHITE_SPACE(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(5, "WHITE_SPACE", "");
        Boolean result =         CheckRegEx(actualNode, state, "[ \\t\\r\\n]");
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_COMMENT(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(2, "COMMENT", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "#"),
                (actualNode) => CheckAnd(actualNode, state, 
                    (actualNode) => CheckZeroOrMore(actualNode, state, 
                        (actualNode) => CheckAnd(actualNode, state, 
                            (actualNode) => Drop(actualNode, state, 
                                (actualNode) => CheckRegEx(actualNode, state, "[\\r\\n]")
                            ),
                            (actualNode) => CheckRegEx(actualNode, state, ".")
                        )
                    ),
                    (actualNode) => CheckRegEx(actualNode, state, "[\\r\\n]")
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Definition(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(30, "Definition", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckRule_SPACING(actualNode, state),
                (actualNode) => CheckAnd(actualNode, state, 
                    (actualNode) => CheckRange(actualNode, state, 0, 1,
                        (actualNode) => CheckOr(actualNode, state, 
                            (actualNode) => CheckRule_IsTerminal(actualNode, state),
                            (actualNode) => CheckRule_Drop(actualNode, state)
                        )
                    ),
                    (actualNode) => CheckAnd(actualNode, state, 
                        (actualNode) => CheckRule_Identifier(actualNode, state),
                        (actualNode) => CheckAnd(actualNode, state, 
                            (actualNode) => Drop(actualNode, state, 
                                (actualNode) => CheckRule_EQUAL(actualNode, state)
                            ),
                            (actualNode) => CheckAnd(actualNode, state, 
                                (actualNode) => CheckRule_Expression(actualNode, state),
                                (actualNode) => CheckRule_LINE_END(actualNode, state)
                            )
                        )
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_IsTerminal(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(11, "IsTerminal", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "$"),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Drop(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(12, "Drop", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "!"),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Identifier(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(24, "Identifier", "");
        Boolean result =         
            MakeTerminal(actualNode, state, 
                (actualNode) => CheckAnd(actualNode, state, 
                    (actualNode) => CheckRule_IdentStart(actualNode, state),
                    (actualNode) => CheckAnd(actualNode, state, 
                        (actualNode) => CheckRule_IdentCont(actualNode, state),
                        (actualNode) => CheckRule_SPACING(actualNode, state)
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_IdentStart(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(23, "IdentStart", "");
        Boolean result =         CheckRegEx(actualNode, state, "[a-zA-Z_]");
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_IdentCont(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(22, "IdentCont", "");
        Boolean result =         
            CheckZeroOrMore(actualNode, state, 
                (actualNode) => CheckRegEx(actualNode, state, "[a-zA-Z0-9_]")
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_EQUAL(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(9, "EQUAL", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "="),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Expression(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(29, "Expression", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckRule_Sequence(actualNode, state),
                (actualNode) => CheckZeroOrMore(actualNode, state, 
                    (actualNode) => CheckAnd(actualNode, state, 
                        (actualNode) => CheckRule_SLASH(actualNode, state),
                        (actualNode) => CheckRule_Sequence(actualNode, state)
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Sequence(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(28, "Sequence", "");
        Boolean result =         
            CheckZeroOrMore(actualNode, state, 
                (actualNode) => CheckRule_Prefix(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Prefix(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(27, "Prefix", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckRange(actualNode, state, 0, 1,
                    (actualNode) => CheckRule_Drop(actualNode, state)
                ),
                (actualNode) => CheckRule_Suffix(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Suffix(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(26, "Suffix", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckRule_Primary(actualNode, state),
                (actualNode) => CheckRange(actualNode, state, 0, 1,
                    (actualNode) => CheckOr(actualNode, state, 
                        (actualNode) => CheckRule_QUESTION(actualNode, state),
                        (actualNode) => CheckOr(actualNode, state, 
                            (actualNode) => CheckRule_STAR(actualNode, state),
                            (actualNode) => CheckRule_PLUS(actualNode, state)
                        )
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Primary(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(25, "Primary", "");
        Boolean result =         
            CheckOr(actualNode, state, 
                (actualNode) => CheckRule_Identifier(actualNode, state),
                (actualNode) => CheckOr(actualNode, state, 
                    (actualNode) => CheckRule_Literal(actualNode, state),
                    (actualNode) => CheckOr(actualNode, state, 
                        (actualNode) => CheckAnd(actualNode, state, 
                            (actualNode) => Drop(actualNode, state, 
                                (actualNode) => CheckRule_BRACKET_OPEN(actualNode, state)
                            ),
                            (actualNode) => CheckAnd(actualNode, state, 
                                (actualNode) => CheckRule_Expression(actualNode, state),
                                (actualNode) => Drop(actualNode, state, 
                                    (actualNode) => CheckRule_BRACKET_CLOSE(actualNode, state)
                                )
                            )
                        ),
                        (actualNode) => CheckOr(actualNode, state, 
                            (actualNode) => CheckRule_Regex(actualNode, state),
                            (actualNode) => CheckRule_DOT(actualNode, state)
                        )
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Literal(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(21, "Literal", "");
        Boolean result =         
            MakeTerminal(actualNode, state, 
                (actualNode) => CheckAnd(actualNode, state, 
                    (actualNode) => CheckOr(actualNode, state, 
                        (actualNode) => CheckAnd(actualNode, state, 
                            (actualNode) => Drop(actualNode, state, 
                                (actualNode) => CheckText(actualNode, state, "'")
                            ),
                            (actualNode) => CheckAnd(actualNode, state, 
                                (actualNode) => CheckZeroOrMore(actualNode, state, 
                                    (actualNode) => CheckRule_Char(actualNode, state)
                                ),
                                (actualNode) => Drop(actualNode, state, 
                                    (actualNode) => CheckText(actualNode, state, "'")
                                )
                            )
                        ),
                        (actualNode) => CheckAnd(actualNode, state, 
                            (actualNode) => CheckText(actualNode, state, "\""),
                            (actualNode) => CheckAnd(actualNode, state, 
                                (actualNode) => CheckZeroOrMore(actualNode, state, 
                                    (actualNode) => CheckRule_Char(actualNode, state)
                                ),
                                (actualNode) => CheckText(actualNode, state, "\"")
                            )
                        )
                    ),
                    (actualNode) => CheckRule_SPACING(actualNode, state)
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Char(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(20, "Char", "");
        Boolean result =         
            CheckOr(actualNode, state, 
                (actualNode) => CheckRegEx(actualNode, state, "[^'\\\\]"),
                (actualNode) => CheckOr(actualNode, state, 
                    (actualNode) => CheckText(actualNode, state, "\\'"),
                    (actualNode) => CheckOr(actualNode, state, 
                        (actualNode) => CheckText(actualNode, state, "\\\\"),
                        (actualNode) => CheckRule_ESCAPEES(actualNode, state)
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_ESCAPEES(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(10, "ESCAPEES", "");
        Boolean result =         
            CheckOr(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "\\0"),
                (actualNode) => CheckOr(actualNode, state, 
                    (actualNode) => CheckText(actualNode, state, "\\a"),
                    (actualNode) => CheckOr(actualNode, state, 
                        (actualNode) => CheckText(actualNode, state, "\\b"),
                        (actualNode) => CheckOr(actualNode, state, 
                            (actualNode) => CheckText(actualNode, state, "\\f"),
                            (actualNode) => CheckOr(actualNode, state, 
                                (actualNode) => CheckText(actualNode, state, "\\n"),
                                (actualNode) => CheckOr(actualNode, state, 
                                    (actualNode) => CheckText(actualNode, state, "\\r"),
                                    (actualNode) => CheckOr(actualNode, state, 
                                        (actualNode) => CheckText(actualNode, state, "\\t"),
                                        (actualNode) => CheckOr(actualNode, state, 
                                            (actualNode) => CheckText(actualNode, state, "\\v"),
                                            (actualNode) => CheckOr(actualNode, state, 
                                                (actualNode) => CheckAnd(actualNode, state, 
                                                    (actualNode) => CheckText(actualNode, state, "\\u"),
                                                    (actualNode) => CheckRegEx(actualNode, state, "[0-9a-fA-F]{4}")
                                                ),
                                                (actualNode) => CheckAnd(actualNode, state, 
                                                    (actualNode) => CheckText(actualNode, state, "\\u"),
                                                    (actualNode) => CheckRegEx(actualNode, state, "[0-9a-fA-F]{8}")
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_BRACKET_OPEN(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(1, "BRACKET_OPEN", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "("),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_BRACKET_CLOSE(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(0, "BRACKET_CLOSE", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, ")"),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_Regex(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(19, "Regex", "");
        Boolean result =         
            MakeTerminal(actualNode, state, 
                (actualNode) => CheckAnd(actualNode, state, 
                    (actualNode) => CheckText(actualNode, state, "["),
                    (actualNode) => CheckAnd(actualNode, state, 
                        (actualNode) => CheckOneOrMore(actualNode, state, 
                            (actualNode) => CheckOr(actualNode, state, 
                                (actualNode) => CheckRegEx(actualNode, state, "[^\\\\\\[\\]]"),
                                (actualNode) => CheckOr(actualNode, state, 
                                    (actualNode) => CheckText(actualNode, state, "\\["),
                                    (actualNode) => CheckOr(actualNode, state, 
                                        (actualNode) => CheckText(actualNode, state, "\\]"),
                                        (actualNode) => CheckOr(actualNode, state, 
                                            (actualNode) => CheckText(actualNode, state, "\\-"),
                                            (actualNode) => CheckOr(actualNode, state, 
                                                (actualNode) => CheckText(actualNode, state, "\\^"),
                                                (actualNode) => CheckOr(actualNode, state, 
                                                    (actualNode) => CheckText(actualNode, state, "\\\\"),
                                                    (actualNode) => CheckRule_ESCAPEES(actualNode, state)
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        ),
                        (actualNode) => CheckAnd(actualNode, state, 
                            (actualNode) => CheckText(actualNode, state, "]"),
                            (actualNode) => CheckAnd(actualNode, state, 
                                (actualNode) => CheckRange(actualNode, state, 0, 1,
                                    (actualNode) => CheckAnd(actualNode, state, 
                                        (actualNode) => CheckText(actualNode, state, "{"),
                                        (actualNode) => CheckAnd(actualNode, state, 
                                            (actualNode) => CheckRule_NUMBER(actualNode, state),
                                            (actualNode) => CheckText(actualNode, state, "}")
                                        )
                                    )
                                ),
                                (actualNode) => CheckRule_SPACING(actualNode, state)
                            )
                        )
                    )
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_NUMBER(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(3, "NUMBER", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckRegEx(actualNode, state, "[1-9]"),
                (actualNode) => CheckZeroOrMore(actualNode, state, 
                    (actualNode) => CheckRegEx(actualNode, state, "[0-9]")
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_DOT(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(7, "DOT", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "."),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_QUESTION(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(15, "QUESTION", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "?"),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_STAR(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(14, "STAR", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "*"),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_PLUS(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(13, "PLUS", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "+"),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_SLASH(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(18, "SLASH", "");
        Boolean result =         
            CheckAnd(actualNode, state, 
                (actualNode) => CheckText(actualNode, state, "/"),
                (actualNode) => CheckRule_SPACING(actualNode, state)
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }
    public Boolean CheckRule_LINE_END(ASTNode parentNode, ParserState state)
    {
        Int32 oldPosition = state.Position;
        ASTNode actualNode = new ASTNode(8, "LINE_END", "");
        Boolean result =         
            Drop(actualNode, state, 
                (actualNode) => CheckAnd(actualNode, state, 
                    (actualNode) => CheckRule_SPACING(actualNode, state),
                    (actualNode) => CheckText(actualNode, state, ";")
                )
            );
        Int32 foundPosition = state.Position;
        if(result && ((actualNode.Children.Count > 0) || (actualNode.Text != "")))
            parentNode.AddChild(actualNode);
        return result;
    }

    public void Parse(String text)
    {
        ParserState state = new ParserState(text);
        ASTNode actualNode = new ASTNode(-1, "ROOT", "");            
        if(CheckRule_Grammar(actualNode, state))
            rootNode = actualNode;
    }
}